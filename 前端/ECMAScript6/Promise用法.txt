1.promise 的含义：
    promise就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。
    Promise是一个对象，从它可以获取异步操作的消息。

    特点
    1）对象的状态不受影响；
    2）一旦状态改变，就不会再变，任何时候都可以得到这个结果；

2.基本用法
    ES6规定，Promise对象是一个构造函数，用来生成Promise实例。

    Promise实例：
        const promise = new Promise(function(resolve, reject) {
            // some code 
            if (/*异步操作成功*/) {
                resolve(value);
            } else {
                reject(value);
            }
        });

    Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve与reject。这事两个函数，由javaScript引擎提供，不用自己部署。
        resolve函数：将Promise函数由“未完成”变为成功，在异步操作成功时调用，并将异步操作的结果作为参数传递出去；
        reject函数： 将Promise对象从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。

    Promise实例生成后，可以用then方法分别指定resolve状态和rehject状态的回调函数；
        promise.then(function(resolve){
            // success
        }, function(reject) {
            // failure
        });
    then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态为resolve时调用，第二个回调函数是Promise对象的状态变为reject时调用，第二个为可选的。两个函数都接受Promise对象传出的值作为参数。

    一个异步操作的结果可以是返回另一个异步操作；

3.Promise.prototype.then()
    作用：为Promise实例添加状态改变时的回调函数

    then方法返回的是一个新的Promise实例。因此可以采用链式写法，即then方法后面再调用另一个then方法。
    采用链式的then，可以指定一组按照顺序调用的回调函数，这时前一个回调函数有可能返回的还是一个Promise对象，这时后一个回调函数就会等待该Promise对象的状态发生变化才会被调用。

4.Promise.prototyp.catch()
    是.then(null, reject)的别名，用于指定发生错误时的回调函数。