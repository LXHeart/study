什么是解构？从数组和对象中提取值，对变量进行赋值；


数组的解构赋值：
    ES6允许写成下面这样为变量赋值：
        let[a, b, c] = [1, 2, 3];
    
    解构赋值允许使用默认值： let[foo = true] = [];  //foo: true

    默认值可以引用解构赋值的其他变量，但该变量必须已经被声明；

对象的解构赋值：
    let{foo, bar} = {foo:'aaa', bar:'bbb'}  //foo: aaa
    对象的解构与数组的有一个重要的不同：数组元素是按次序排列的，变量的取值又他它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值；

    let{foo:foo, bar:bar} = {foo:'aaa', bar:'bbb'}
    对象解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量，真正被赋值的是后者，而不是前者；

    对象的解构也可以使用默认值；

字符串的解构赋值：
    const [a, b, c, d, e] = 'hello';
    类似数组的对象都有一个length属性，因此还可以对这个属性进行解构赋值；
    let{length} = 'hello'; // length：5

数值和布尔值的解构赋值：
    如果等号右边的是数值和布尔值，则会先转为对象；
    解构赋值的规则是：只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对他们的解构赋值都会报错；

函数参数的解构赋值：
    function add([x, y]) {
        return x + y;
    }
    add([1, 2]); // 3

    函数参数的结构也可以使用默认值；

    js数组map方法：这里的map指的是映射。[].map();
    example: [1, 2, 3, 4].map((item) => {return item * item});  // [1, 4, 9, 16]

    
