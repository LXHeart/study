
AJAX = Asynchornous JavaScript and XML

优点：不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容；

AJAX 工作原理：
    1.创建一个 XMLHttpRequest 对象
    2.发送 HttpRequest
    3.服务器接收到HttpRequest对象
    4.服务器创建一个响应并将数据返回浏览器

-------------------------------------------------------------------------------------------------------------------------------------------------

AJAX - 创建XMLHttpRequest对象
    XMLHttpRequest对象：所有现代浏览器均支持XMLHttpRequest对象（IE5、IE6使用ActiveXObject）。
    XMLHttpRequest用于在后台与服务器交换数据。

AJAX - XMLHttpRequest请求
    如果需要将请求发送到服务器，我们使用XMLHttpRequest对象的open()和send()方法；
    xmlHttp.open("GET", "ajax_info.txt", true);

    open(method, url, async)
        -method: 请求类型：GET或POST
        -url： 文件在服务器上的位置
        -async： true（异步）/false（同步）
    send(string):将请求发送到服务器
        -string： 仅用于post请求

    GTE还是POST？
        与post相比，get更简单也更快，并且在大部分情况下均能使用。在以下情况请使用post请求：
        -无法使用缓存文件（更新服务器上的文件或数据）
        -向服务器发送大量数据（post没有数据量限制）
        -发送包含位置字符的用户输入时，post比get更稳定也更可靠
    
    如果需要像HTML表单那样POST数据，请使用setRequestHeader()来添加HTTP头。然后在send()方法中规定您希望发送的数据。
        xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urllencoded");
    
AJAX - 服务器响应
    如果需要获得来自服务器的响应，请使用XMLHttpRequest对象的responseText或responseXML属性；

AJAX - onreadystatechange事件
    每当readyState改变时，就会出触发onreadystatechange事件；readyState属性中存有XMLHttpRequest的状态信息；

    下面是XMLHttpRequest对象的三个重要属性：
    -onreadystatechange：存储函数或函数名，每当readyState属性改变时，就会调用该函数。
    -readyState：存有XMLHttpReauest的状态；0：请求未初始化 1：服务器连接已建立 2：请求已接收 3：请求处理中 4：请求已完成且响应已就绪
    -status: 返回的状态；

实例Demo
    var xmlHttp;
    if(window.XMLHttpRequest){
        xmlHttp = new XMLHttpRequest();
    } else {
        xmlHttp = new ActiceXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange=function(){
        if (xmlhttp.readyState==4 && xmlhttp.status==200){
            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
        }
    }
    xmlhttp.open("GET","/try/ajax/ajax_info.txt",true);
    xmlhttp.send();
    
状态码补全：

100——客户必须继续发出请求

101——客户要求服务器根据请求转换HTTP协议版本

200——交易成功

201——提示知道新文件的URL

202——接受和处理、但处理未完成

203——返回信息不确定或不完整

204——请求收到，但返回信息为空

205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件

206——服务器已经完成了部分用户的GET请求

300——请求的资源可在多处得到

301——删除请求数据

302——在其他地址发现了请求数据

303——建议客户访问其他URL或访问方式

304——客户端已经执行了GET，但文件未变化

305——请求的资源必须从服务器指定的地址得到

306——前一版本HTTP中使用的代码，现行版本中不再使用

307——申明请求的资源临时性删除

400——错误请求，如语法错误

401——请求授权失败

402——保留有效ChargeTo头响应

403——请求不允许

404——没有发现文件、查询或URl

405——用户在Request-Line字段定义的方法不允许

406——根据用户发送的Accept拖，请求资源不可访问

407——类似401，用户必须首先在代理服务器上得到授权

408——客户端没有在用户指定的饿时间内完成请求

409——对当前资源状态，请求不能完成

410——服务器上不再有此资源且无进一步的参考地址

411——服务器拒绝用户定义的Content-Length属性请求

412——一个或多个请求头字段在当前请求中错误

413——请求的资源大于服务器允许的大小

414——请求的资源URL长于服务器允许的长度

415——请求资源不支持请求项目格式

416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段

417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求

500——服务器产生内部错误

501——服务器不支持请求的函数

502——服务器暂时不可用，有时是为了防止发生系统过载

503——服务器过载或暂停维修

504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长

505——服务器不支持或拒绝支请求头中指定的HTTP版本