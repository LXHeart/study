props：
    可以是数组或对象，用于接收来自父组件的数据；对象允许配置高级选项，如类型检测，自定义校验和设置默认值。
    组件实例的作用域是孤立的，这意味着不能（也不应该）在子组件的模版内直接引用父组件的数据。父组件的数据需要通过prop才能下发到子组件中。

v-bind：动态的绑定一个或多个特性，或一个组件prop到表达式。在绑定prop时，prop必须在子组件中声明；
    demo：
    子组件：
    porps:{
        test:String   //从父组件接收到的数据，这个数据还可以进行定义什么的。。不过我还没找到例子怎么定义这个数据的参数
    }
    父组件
    <Child v-bind:test="这里可以是动态绑定的参数"></Child>


ref：可以使用ref为子组件注册引用信息，引用信息将会注册到父组件的$refs对象上，使用$refs访问子组件的实例；这个访问实例后就可以拿到子组件的所有东西啦~~~~（感觉这个是获取子组件内容的最简单办法了）；

上面一个是子组件获取父组件的值，一个是父组件获取子组件的值的方法；

还有一种比较麻烦的方式也可以实现上述操作：
    使用vm.$emit(event, [...args])   触发当前实例上的事件。附加参数都会传给监听器回调。
    使用vm.$on(event, callback)监听当前实例上的自定义事件，事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。
    具体用法：
        父组件中使用ref为子组件注册信息，获取子组件实例，使用$emit触发实例上的事件；
        子组件中使用vm.$on来监听该事件是否被触发，这个vm.$on写在mounted函数中；
    
    后续理解：
        1.父组件内：为子组件注册引用信息，使用引用信息获取子组件实例并为子组件注册自定义事件
        2.子组件内：使用$on监听父组件为子组件注册的自定义事件，触发并注册新事件
        3.子组件上使用v-on监听子组件注册的事件
    


    
    

